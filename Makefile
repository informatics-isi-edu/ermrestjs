# Makefile rules for ermrestjs package

# Disable built-in rules
.SUFFIXES:

# make sure NOD_ENV is defined (use production if not defined or invalid)
ifneq ($(NODE_ENV),development)
NODE_ENV:=production
endif

# env variables needed for installation
WEB_URL_ROOT?=/
WEB_INSTALL_ROOT?=/var/www/html/
ERMRESTJS_REL_PATH?=ermrestjs/

BUILD_VERSION:=$(shell date +%Y%m%d%H%M%S)

# where chaise will be installed
ERMRESTJSDIR:=$(WEB_INSTALL_ROOT)$(ERMRESTJS_REL_PATH)

#chaise and ermrsetjs paths
ERMRESTJS_BASE_PATH:=$(WEB_URL_ROOT)$(ERMRESTJS_REL_PATH)

# Project name
PROJ=ermrest

# Node module dependencies
MODULES=node_modules

# Node bin scripts
BIN=$(MODULES)/.bin

# JavaScript source and test specs
JS=js
SETUP=js/setup
UTIL=js/utils

MAKEFILE_VAR=makefile_variables.js

# where vendor libs reside
VENDOR=vendor

# Project source files
HEADER=$(SETUP)/header.js
FOOTER=$(SETUP)/footer.js
HEADER_FOOTER= $(HEADER) \
			   $(FOOTER)

# node_build.js is generated by the `pre-generate-files-for-build` make target
SOURCE=$(UTIL)/polyfills.js \
	   $(HEADER) \
	   $(UTIL)/logger.js \
	   $(JS)/core.js \
	   $(JS)/datapath.js \
	   $(JS)/filters.js \
	   $(UTIL)/constants.js \
	   $(UTIL)/json_ld_schema.js \
	   $(UTIL)/helpers.js \
	   $(UTIL)/pseudocolumn_helpers.js \
	   $(UTIL)/handlebar_helpers.js \
	   $(JS)/errors.js \
	   $(JS)/parser.js \
	   $(JS)/http.js \
	   $(JS)/json_ld_validator.js \
	   $(JS)/reference.js \
	   $(JS)/column.js \
	   $(JS)/ag_reference.js \
		 $(JS)/export.js \
	   $(FOOTER) \
	   $(JS)/hatrac.js \
	   $(JS)/format.js \
	   $(DIST)/$(MAKEFILE_VAR) \
	   $(SETUP)/node.js \
	   $(SETUP)/ng.js \

# Vendor libs
LIB=$(VENDOR)/lz-string.min.js \
	$(VENDOR)/spark-md5.min.js \
	$(VENDOR)/moment.min.js \
	$(VENDOR)/mustache.min.js \
	$(VENDOR)/handlebars.min.js \
	$(VENDOR)/markdown-it.min.js \
	$(VENDOR)/markdown-it-sub.min.js \
	$(VENDOR)/markdown-it-sup.min.js \
	$(VENDOR)/markdown-it-span.js \
	$(VENDOR)/markdown-it-attrs.js \
	$(VENDOR)/markdown-it-container.min.js

# Build target
DIST=dist

# Project package full/minified
PKG=$(PROJ).js
MIN=$(PROJ).min.js
VER=$(PROJ).ver.txt
MIN_LIB=$(PROJ).vendor.min.js
SRC_MAP=$(PROJ).min.js.map

# Documentation target
DOC=docs/dev-docs
API=$(DOC)/api.md

# Hidden target files (for make only)
LINT=.make-lint

# Build rule
$(DIST): print_variables $(DIST)/$(PKG) $(DIST)/$(MIN_LIB) $(DIST)/$(VER)
	@touch $(DIST)

# Rule to build the version number file
$(DIST)/$(VER): $(SOURCE) $(BIN)
	@mkdir -p $(DIST)
	$(info - creating $(DIST)/$(VER) version file)
	@git log --pretty=format:'%H' -n 1 > $(DIST)/$(VER)

# Rule to build the package
$(DIST)/$(PKG): $(SOURCE) $(BIN)
	@mkdir -p $(DIST)
	@cat $(SOURCE) > $(DIST)/$(PKG)
	$(info - creating $(DIST)/$(MIN) file)
	@#since we're building it in build folder but when we deploy it's not build
	@#inside the build folder anymore, we have to define the base
	@$(BIN)/uglifyjs $(DIST)/$(PKG) -o $(DIST)/$(MIN) --compress --source-map "url='$(SRC_MAP)',base='$(DIST)',root='$(ERMRESTJS_BASE_PATH)'"

# Rule to build the minified library file (vendor files)
$(DIST)/$(MIN_LIB): $(LIB) $(BIN)
	@mkdir -p $(DIST)
	$(info - creating $(DIST)/$(MIN_LIB) minified vendor file)
	@cat $(LIB) > $(DIST)/$(MIN_LIB)
	@echo 'ermrestjsVendorFileLoaded = true;' >> $(DIST)/$(MIN_LIB)

# Rule to lint the source (terminate build on errors)
$(LINT): $(SOURCE) $(BIN)
	$(info - running linter)
	@$(BIN)/jshint $(filter $?, $(filter-out $(HEADER_FOOTER), $(SOURCE)))
	@touch $(LINT)

# Rule for making markdown docs
$(DOC): $(API)

# Rule for making API doc
$(API): $(SOURCE) $(BIN)
	@mkdir -p $(DOC)
	$(info - creating $(API) document)
	@$(BIN)/jsdoc2md $(DIST)/$(PKG) > $(API)

# Rule to ensure Node bin scripts are present
$(BIN): $(MODULES)
	@touch $(BIN)

# Rule to install Node modules locally
$(MODULES): package.json
	@npm clean-install
	@touch $(MODULES)

# generate makefile_variables file
$(DIST)/$(MAKEFILE_VAR): FORCE
	@mkdir -p $(DIST)
	$(info - creating $(DIST)/$(MAKEFILE_VAR) file)
	@echo 'var ermrestjsBuildVariables = {};' > $(DIST)/$(MAKEFILE_VAR)
	@echo 'ermrestjsBuildVariables.buildVersion="$(BUILD_VERSION)";' >> $(DIST)/$(MAKEFILE_VAR)
	@echo 'ermrestjsBuildVariables.ermrestjsBasePath="$(ERMRESTJS_BASE_PATH)";' >> $(DIST)/$(MAKEFILE_VAR)

# make sure ERMRESTJSDIR is not the root
dont_deploy_in_root:
	@echo "$(ERMRESTJSDIR)" | egrep -vq "^/$$|.*:/$$"

print_variables:
	$(info =================)
	$(info NODE_ENV:=$(NODE_ENV))
	$(info BUILD_VERSION=$(BUILD_VERSION))
	$(info building and deploying to: $(ERMRESTJSDIR))
	$(info ERMrestJS will be accessed using: $(ERMRESTJS_BASE_PATH))
	$(info =================)

# dummy target to always run the targets that depend on it
FORCE:

# Rule for node deps
.PHONY: deps
deps: $(BIN)

# for test cases we have to make sure we're installing dev dependencies
.PHONY: deps-test
deps-test:
	@npm clean-install --production=false

# Rule to clean project directory
.PHONY: clean
clean:
	rm -rf $(DIST)
	rm -rf $(API)
	@rm -f .make-*

# Rule to clean the dependencies too
.PHONY: distclean
distclean: clean
	rm -rf $(MODULES)

# Rule to run the unit tests
.PHONY: test
test:
	node test/jasmine-runner.js

# Rule to run the unit tests
.PHONY: testsingle
test-single:
	node test/single-test-runner.js

# Rule to run the linter
.PHONY: lint
lint: $(LINT)

# rule to make sure there's no error and build the package and docs
.PHONY: all
all: $(LINT) $(DIST) $(DOC)

# Rule to deploy the already built package
.PHONY: deploy
deploy: dont_deploy_in_root
	$(info - deploying the package)
	@rsync -avz --exclude=$(MAKEFILE_VAR) $(DIST)/ $(ERMRESTJSDIR)

# Rules for help/usage
.PHONY: help usage
help: usage
usage:
	@echo "Available 'make' targets:"
	@echo "    all           - run linter, build the pacakge andand docs"
	@echo "    dist   	     - local install of node dependencies, and build the pacakge"
	@echo "    deploy   	   - deploy the package to $(ERMRESTJSDIR)"
	@echo "    deps          - local install of node dependencies"
	@echo "    deps-test     - local install of dev node dependencies"
	@echo "    lint          - lint the source"
	@echo "    test          - run tests"
	@echo "    clean         - remove the files and folders created during build"
	@echo "    distclean     - the same as clean, and also removes npm dependencies"
